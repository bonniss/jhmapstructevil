package ai.realworld.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AlLeandroAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlLeandroAllPropertiesEquals(AlLeandro expected, AlLeandro actual) {
        assertAlLeandroAutoGeneratedPropertiesEquals(expected, actual);
        assertAlLeandroAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlLeandroAllUpdatablePropertiesEquals(AlLeandro expected, AlLeandro actual) {
        assertAlLeandroUpdatableFieldsEquals(expected, actual);
        assertAlLeandroUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlLeandroAutoGeneratedPropertiesEquals(AlLeandro expected, AlLeandro actual) {
        assertThat(expected)
            .as("Verify AlLeandro auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlLeandroUpdatableFieldsEquals(AlLeandro expected, AlLeandro actual) {
        assertThat(expected)
            .as("Verify AlLeandro relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getWeight()).as("check weight").isEqualTo(actual.getWeight()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getFromDate()).as("check fromDate").isEqualTo(actual.getFromDate()))
            .satisfies(e -> assertThat(e.getToDate()).as("check toDate").isEqualTo(actual.getToDate()))
            .satisfies(e -> assertThat(e.getIsEnabled()).as("check isEnabled").isEqualTo(actual.getIsEnabled()))
            .satisfies(e ->
                assertThat(e.getSeparateWinningByPeriods())
                    .as("check separateWinningByPeriods")
                    .isEqualTo(actual.getSeparateWinningByPeriods())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlLeandroUpdatableRelationshipsEquals(AlLeandro expected, AlLeandro actual) {
        assertThat(expected)
            .as("Verify AlLeandro relationships")
            .satisfies(e -> assertThat(e.getProgramBackground()).as("check programBackground").isEqualTo(actual.getProgramBackground()))
            .satisfies(e -> assertThat(e.getWheelBackground()).as("check wheelBackground").isEqualTo(actual.getWheelBackground()))
            .satisfies(e -> assertThat(e.getApplication()).as("check application").isEqualTo(actual.getApplication()));
    }
}
