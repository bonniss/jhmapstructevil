package ai.realworld.domain;

import static ai.realworld.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AlVueVueViAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlVueVueViAllPropertiesEquals(AlVueVueVi expected, AlVueVueVi actual) {
        assertAlVueVueViAutoGeneratedPropertiesEquals(expected, actual);
        assertAlVueVueViAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlVueVueViAllUpdatablePropertiesEquals(AlVueVueVi expected, AlVueVueVi actual) {
        assertAlVueVueViUpdatableFieldsEquals(expected, actual);
        assertAlVueVueViUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlVueVueViAutoGeneratedPropertiesEquals(AlVueVueVi expected, AlVueVueVi actual) {
        assertThat(expected)
            .as("Verify AlVueVueVi auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlVueVueViUpdatableFieldsEquals(AlVueVueVi expected, AlVueVueVi actual) {
        assertThat(expected)
            .as("Verify AlVueVueVi relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getContentHeitiga()).as("check contentHeitiga").isEqualTo(actual.getContentHeitiga()))
            .satisfies(e -> assertThat(e.getDiscountType()).as("check discountType").isEqualTo(actual.getDiscountType()))
            .satisfies(e ->
                assertThat(e.getDiscountRate())
                    .as("check discountRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getDiscountRate())
            )
            .satisfies(e -> assertThat(e.getScope()).as("check scope").isEqualTo(actual.getScope()))
            .satisfies(e ->
                assertThat(e.getIsIndividuallyUsedOnly()).as("check isIndividuallyUsedOnly").isEqualTo(actual.getIsIndividuallyUsedOnly())
            )
            .satisfies(e -> assertThat(e.getUsageLifeTimeLimit()).as("check usageLifeTimeLimit").isEqualTo(actual.getUsageLifeTimeLimit()))
            .satisfies(e -> assertThat(e.getUsageLimitPerUser()).as("check usageLimitPerUser").isEqualTo(actual.getUsageLimitPerUser()))
            .satisfies(e -> assertThat(e.getUsageQuantity()).as("check usageQuantity").isEqualTo(actual.getUsageQuantity()))
            .satisfies(e ->
                assertThat(e.getMinimumSpend())
                    .as("check minimumSpend")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getMinimumSpend())
            )
            .satisfies(e ->
                assertThat(e.getMaximumSpend())
                    .as("check maximumSpend")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getMaximumSpend())
            )
            .satisfies(e ->
                assertThat(e.getCanBeCollectedByUser()).as("check canBeCollectedByUser").isEqualTo(actual.getCanBeCollectedByUser())
            )
            .satisfies(e -> assertThat(e.getSalePriceFromDate()).as("check salePriceFromDate").isEqualTo(actual.getSalePriceFromDate()))
            .satisfies(e -> assertThat(e.getSalePriceToDate()).as("check salePriceToDate").isEqualTo(actual.getSalePriceToDate()))
            .satisfies(e -> assertThat(e.getPublicationStatus()).as("check publicationStatus").isEqualTo(actual.getPublicationStatus()))
            .satisfies(e -> assertThat(e.getPublishedDate()).as("check publishedDate").isEqualTo(actual.getPublishedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlVueVueViUpdatableRelationshipsEquals(AlVueVueVi expected, AlVueVueVi actual) {
        assertThat(expected)
            .as("Verify AlVueVueVi relationships")
            .satisfies(e -> assertThat(e.getImage()).as("check image").isEqualTo(actual.getImage()))
            .satisfies(e -> assertThat(e.getAlVueVueViUsage()).as("check alVueVueViUsage").isEqualTo(actual.getAlVueVueViUsage()))
            .satisfies(e -> assertThat(e.getApplication()).as("check application").isEqualTo(actual.getApplication()));
    }
}
