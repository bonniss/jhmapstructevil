package ai.realworld.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AlPacinoVoucherViAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlPacinoVoucherViAllPropertiesEquals(AlPacinoVoucherVi expected, AlPacinoVoucherVi actual) {
        assertAlPacinoVoucherViAutoGeneratedPropertiesEquals(expected, actual);
        assertAlPacinoVoucherViAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlPacinoVoucherViAllUpdatablePropertiesEquals(AlPacinoVoucherVi expected, AlPacinoVoucherVi actual) {
        assertAlPacinoVoucherViUpdatableFieldsEquals(expected, actual);
        assertAlPacinoVoucherViUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlPacinoVoucherViAutoGeneratedPropertiesEquals(AlPacinoVoucherVi expected, AlPacinoVoucherVi actual) {
        assertThat(expected)
            .as("Verify AlPacinoVoucherVi auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlPacinoVoucherViUpdatableFieldsEquals(AlPacinoVoucherVi expected, AlPacinoVoucherVi actual) {
        assertThat(expected)
            .as("Verify AlPacinoVoucherVi relevant properties")
            .satisfies(e -> assertThat(e.getSourceTitle()).as("check sourceTitle").isEqualTo(actual.getSourceTitle()))
            .satisfies(e -> assertThat(e.getSourceUrl()).as("check sourceUrl").isEqualTo(actual.getSourceUrl()))
            .satisfies(e -> assertThat(e.getCollectedDate()).as("check collectedDate").isEqualTo(actual.getCollectedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlPacinoVoucherViUpdatableRelationshipsEquals(AlPacinoVoucherVi expected, AlPacinoVoucherVi actual) {
        assertThat(expected)
            .as("Verify AlPacinoVoucherVi relationships")
            .satisfies(e -> assertThat(e.getUser()).as("check user").isEqualTo(actual.getUser()))
            .satisfies(e -> assertThat(e.getVoucher()).as("check voucher").isEqualTo(actual.getVoucher()))
            .satisfies(e -> assertThat(e.getApplication()).as("check application").isEqualTo(actual.getApplication()));
    }
}
