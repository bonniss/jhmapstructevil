package ai.realworld.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AlInquiryViAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlInquiryViAllPropertiesEquals(AlInquiryVi expected, AlInquiryVi actual) {
        assertAlInquiryViAutoGeneratedPropertiesEquals(expected, actual);
        assertAlInquiryViAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlInquiryViAllUpdatablePropertiesEquals(AlInquiryVi expected, AlInquiryVi actual) {
        assertAlInquiryViUpdatableFieldsEquals(expected, actual);
        assertAlInquiryViUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlInquiryViAutoGeneratedPropertiesEquals(AlInquiryVi expected, AlInquiryVi actual) {
        assertThat(expected)
            .as("Verify AlInquiryVi auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlInquiryViUpdatableFieldsEquals(AlInquiryVi expected, AlInquiryVi actual) {
        assertThat(expected)
            .as("Verify AlInquiryVi relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getBody()).as("check body").isEqualTo(actual.getBody()))
            .satisfies(e -> assertThat(e.getSender()).as("check sender").isEqualTo(actual.getSender()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getContentJason()).as("check contentJason").isEqualTo(actual.getContentJason()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlInquiryViUpdatableRelationshipsEquals(AlInquiryVi expected, AlInquiryVi actual) {
        assertThat(expected)
            .as("Verify AlInquiryVi relationships")
            .satisfies(e -> assertThat(e.getCustomer()).as("check customer").isEqualTo(actual.getCustomer()))
            .satisfies(e -> assertThat(e.getAgency()).as("check agency").isEqualTo(actual.getAgency()))
            .satisfies(e -> assertThat(e.getPersonInCharge()).as("check personInCharge").isEqualTo(actual.getPersonInCharge()))
            .satisfies(e -> assertThat(e.getApplication()).as("check application").isEqualTo(actual.getApplication()));
    }
}
