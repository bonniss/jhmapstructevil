package xyz.jhmapstruct.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NextCustomerSigmaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextCustomerSigmaAllPropertiesEquals(NextCustomerSigma expected, NextCustomerSigma actual) {
        assertNextCustomerSigmaAutoGeneratedPropertiesEquals(expected, actual);
        assertNextCustomerSigmaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextCustomerSigmaAllUpdatablePropertiesEquals(NextCustomerSigma expected, NextCustomerSigma actual) {
        assertNextCustomerSigmaUpdatableFieldsEquals(expected, actual);
        assertNextCustomerSigmaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextCustomerSigmaAutoGeneratedPropertiesEquals(NextCustomerSigma expected, NextCustomerSigma actual) {
        assertThat(expected)
            .as("Verify NextCustomerSigma auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextCustomerSigmaUpdatableFieldsEquals(NextCustomerSigma expected, NextCustomerSigma actual) {
        assertThat(expected)
            .as("Verify NextCustomerSigma relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextCustomerSigmaUpdatableRelationshipsEquals(NextCustomerSigma expected, NextCustomerSigma actual) {
        assertThat(expected)
            .as("Verify NextCustomerSigma relationships")
            .satisfies(e -> assertThat(e.getTenant()).as("check tenant").isEqualTo(actual.getTenant()));
    }
}
