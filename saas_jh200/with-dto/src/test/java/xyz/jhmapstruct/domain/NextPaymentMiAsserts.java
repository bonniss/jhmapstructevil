package xyz.jhmapstruct.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static xyz.jhmapstruct.domain.AssertUtils.bigDecimalCompareTo;

public class NextPaymentMiAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentMiAllPropertiesEquals(NextPaymentMi expected, NextPaymentMi actual) {
        assertNextPaymentMiAutoGeneratedPropertiesEquals(expected, actual);
        assertNextPaymentMiAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentMiAllUpdatablePropertiesEquals(NextPaymentMi expected, NextPaymentMi actual) {
        assertNextPaymentMiUpdatableFieldsEquals(expected, actual);
        assertNextPaymentMiUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentMiAutoGeneratedPropertiesEquals(NextPaymentMi expected, NextPaymentMi actual) {
        assertThat(expected)
            .as("Verify NextPaymentMi auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentMiUpdatableFieldsEquals(NextPaymentMi expected, NextPaymentMi actual) {
        assertThat(expected)
            .as("Verify NextPaymentMi relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getPaymentDate()).as("check paymentDate").isEqualTo(actual.getPaymentDate()))
            .satisfies(e -> assertThat(e.getPaymentMethod()).as("check paymentMethod").isEqualTo(actual.getPaymentMethod()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentMiUpdatableRelationshipsEquals(NextPaymentMi expected, NextPaymentMi actual) {
        assertThat(expected)
            .as("Verify NextPaymentMi relationships")
            .satisfies(e -> assertThat(e.getTenant()).as("check tenant").isEqualTo(actual.getTenant()));
    }
}
