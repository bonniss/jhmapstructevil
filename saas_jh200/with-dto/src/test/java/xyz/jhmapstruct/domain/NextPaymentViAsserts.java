package xyz.jhmapstruct.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static xyz.jhmapstruct.domain.AssertUtils.bigDecimalCompareTo;

public class NextPaymentViAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentViAllPropertiesEquals(NextPaymentVi expected, NextPaymentVi actual) {
        assertNextPaymentViAutoGeneratedPropertiesEquals(expected, actual);
        assertNextPaymentViAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentViAllUpdatablePropertiesEquals(NextPaymentVi expected, NextPaymentVi actual) {
        assertNextPaymentViUpdatableFieldsEquals(expected, actual);
        assertNextPaymentViUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentViAutoGeneratedPropertiesEquals(NextPaymentVi expected, NextPaymentVi actual) {
        assertThat(expected)
            .as("Verify NextPaymentVi auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentViUpdatableFieldsEquals(NextPaymentVi expected, NextPaymentVi actual) {
        assertThat(expected)
            .as("Verify NextPaymentVi relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getPaymentDate()).as("check paymentDate").isEqualTo(actual.getPaymentDate()))
            .satisfies(e -> assertThat(e.getPaymentMethod()).as("check paymentMethod").isEqualTo(actual.getPaymentMethod()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentViUpdatableRelationshipsEquals(NextPaymentVi expected, NextPaymentVi actual) {
        assertThat(expected)
            .as("Verify NextPaymentVi relationships")
            .satisfies(e -> assertThat(e.getTenant()).as("check tenant").isEqualTo(actual.getTenant()));
    }
}
