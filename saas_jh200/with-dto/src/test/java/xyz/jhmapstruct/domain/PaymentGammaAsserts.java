package xyz.jhmapstruct.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static xyz.jhmapstruct.domain.AssertUtils.bigDecimalCompareTo;

public class PaymentGammaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentGammaAllPropertiesEquals(PaymentGamma expected, PaymentGamma actual) {
        assertPaymentGammaAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentGammaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentGammaAllUpdatablePropertiesEquals(PaymentGamma expected, PaymentGamma actual) {
        assertPaymentGammaUpdatableFieldsEquals(expected, actual);
        assertPaymentGammaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentGammaAutoGeneratedPropertiesEquals(PaymentGamma expected, PaymentGamma actual) {
        assertThat(expected)
            .as("Verify PaymentGamma auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentGammaUpdatableFieldsEquals(PaymentGamma expected, PaymentGamma actual) {
        assertThat(expected)
            .as("Verify PaymentGamma relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getPaymentDate()).as("check paymentDate").isEqualTo(actual.getPaymentDate()))
            .satisfies(e -> assertThat(e.getPaymentMethod()).as("check paymentMethod").isEqualTo(actual.getPaymentMethod()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentGammaUpdatableRelationshipsEquals(PaymentGamma expected, PaymentGamma actual) {
        assertThat(expected)
            .as("Verify PaymentGamma relationships")
            .satisfies(e -> assertThat(e.getTenant()).as("check tenant").isEqualTo(actual.getTenant()));
    }
}
