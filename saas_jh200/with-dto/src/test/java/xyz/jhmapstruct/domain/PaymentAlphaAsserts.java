package xyz.jhmapstruct.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static xyz.jhmapstruct.domain.AssertUtils.bigDecimalCompareTo;

public class PaymentAlphaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAlphaAllPropertiesEquals(PaymentAlpha expected, PaymentAlpha actual) {
        assertPaymentAlphaAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentAlphaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAlphaAllUpdatablePropertiesEquals(PaymentAlpha expected, PaymentAlpha actual) {
        assertPaymentAlphaUpdatableFieldsEquals(expected, actual);
        assertPaymentAlphaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAlphaAutoGeneratedPropertiesEquals(PaymentAlpha expected, PaymentAlpha actual) {
        assertThat(expected)
            .as("Verify PaymentAlpha auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAlphaUpdatableFieldsEquals(PaymentAlpha expected, PaymentAlpha actual) {
        assertThat(expected)
            .as("Verify PaymentAlpha relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getPaymentDate()).as("check paymentDate").isEqualTo(actual.getPaymentDate()))
            .satisfies(e -> assertThat(e.getPaymentMethod()).as("check paymentMethod").isEqualTo(actual.getPaymentMethod()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAlphaUpdatableRelationshipsEquals(PaymentAlpha expected, PaymentAlpha actual) {
        assertThat(expected)
            .as("Verify PaymentAlpha relationships")
            .satisfies(e -> assertThat(e.getTenant()).as("check tenant").isEqualTo(actual.getTenant()));
    }
}
