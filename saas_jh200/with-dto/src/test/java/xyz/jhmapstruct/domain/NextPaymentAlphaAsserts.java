package xyz.jhmapstruct.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static xyz.jhmapstruct.domain.AssertUtils.bigDecimalCompareTo;

public class NextPaymentAlphaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentAlphaAllPropertiesEquals(NextPaymentAlpha expected, NextPaymentAlpha actual) {
        assertNextPaymentAlphaAutoGeneratedPropertiesEquals(expected, actual);
        assertNextPaymentAlphaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentAlphaAllUpdatablePropertiesEquals(NextPaymentAlpha expected, NextPaymentAlpha actual) {
        assertNextPaymentAlphaUpdatableFieldsEquals(expected, actual);
        assertNextPaymentAlphaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentAlphaAutoGeneratedPropertiesEquals(NextPaymentAlpha expected, NextPaymentAlpha actual) {
        assertThat(expected)
            .as("Verify NextPaymentAlpha auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentAlphaUpdatableFieldsEquals(NextPaymentAlpha expected, NextPaymentAlpha actual) {
        assertThat(expected)
            .as("Verify NextPaymentAlpha relevant properties")
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getPaymentDate()).as("check paymentDate").isEqualTo(actual.getPaymentDate()))
            .satisfies(e -> assertThat(e.getPaymentMethod()).as("check paymentMethod").isEqualTo(actual.getPaymentMethod()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextPaymentAlphaUpdatableRelationshipsEquals(NextPaymentAlpha expected, NextPaymentAlpha actual) {
        assertThat(expected)
            .as("Verify NextPaymentAlpha relationships")
            .satisfies(e -> assertThat(e.getTenant()).as("check tenant").isEqualTo(actual.getTenant()));
    }
}
