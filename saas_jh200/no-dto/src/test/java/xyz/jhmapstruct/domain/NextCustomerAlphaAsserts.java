package xyz.jhmapstruct.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NextCustomerAlphaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextCustomerAlphaAllPropertiesEquals(NextCustomerAlpha expected, NextCustomerAlpha actual) {
        assertNextCustomerAlphaAutoGeneratedPropertiesEquals(expected, actual);
        assertNextCustomerAlphaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextCustomerAlphaAllUpdatablePropertiesEquals(NextCustomerAlpha expected, NextCustomerAlpha actual) {
        assertNextCustomerAlphaUpdatableFieldsEquals(expected, actual);
        assertNextCustomerAlphaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextCustomerAlphaAutoGeneratedPropertiesEquals(NextCustomerAlpha expected, NextCustomerAlpha actual) {
        assertThat(expected)
            .as("Verify NextCustomerAlpha auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextCustomerAlphaUpdatableFieldsEquals(NextCustomerAlpha expected, NextCustomerAlpha actual) {
        assertThat(expected)
            .as("Verify NextCustomerAlpha relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextCustomerAlphaUpdatableRelationshipsEquals(NextCustomerAlpha expected, NextCustomerAlpha actual) {
        assertThat(expected)
            .as("Verify NextCustomerAlpha relationships")
            .satisfies(e -> assertThat(e.getTenant()).as("check tenant").isEqualTo(actual.getTenant()));
    }
}
