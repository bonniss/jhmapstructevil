package xyz.jhmapstruct.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NextSupplierAlphaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextSupplierAlphaAllPropertiesEquals(NextSupplierAlpha expected, NextSupplierAlpha actual) {
        assertNextSupplierAlphaAutoGeneratedPropertiesEquals(expected, actual);
        assertNextSupplierAlphaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextSupplierAlphaAllUpdatablePropertiesEquals(NextSupplierAlpha expected, NextSupplierAlpha actual) {
        assertNextSupplierAlphaUpdatableFieldsEquals(expected, actual);
        assertNextSupplierAlphaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextSupplierAlphaAutoGeneratedPropertiesEquals(NextSupplierAlpha expected, NextSupplierAlpha actual) {
        assertThat(expected)
            .as("Verify NextSupplierAlpha auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextSupplierAlphaUpdatableFieldsEquals(NextSupplierAlpha expected, NextSupplierAlpha actual) {
        assertThat(expected)
            .as("Verify NextSupplierAlpha relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getContactPerson()).as("check contactPerson").isEqualTo(actual.getContactPerson()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNextSupplierAlphaUpdatableRelationshipsEquals(NextSupplierAlpha expected, NextSupplierAlpha actual) {
        assertThat(expected)
            .as("Verify NextSupplierAlpha relationships")
            .satisfies(e -> assertThat(e.getTenant()).as("check tenant").isEqualTo(actual.getTenant()))
            .satisfies(e -> assertThat(e.getProducts()).as("check products").isEqualTo(actual.getProducts()));
    }
}
