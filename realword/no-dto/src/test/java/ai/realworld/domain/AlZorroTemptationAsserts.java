package ai.realworld.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AlZorroTemptationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlZorroTemptationAllPropertiesEquals(AlZorroTemptation expected, AlZorroTemptation actual) {
        assertAlZorroTemptationAutoGeneratedPropertiesEquals(expected, actual);
        assertAlZorroTemptationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlZorroTemptationAllUpdatablePropertiesEquals(AlZorroTemptation expected, AlZorroTemptation actual) {
        assertAlZorroTemptationUpdatableFieldsEquals(expected, actual);
        assertAlZorroTemptationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlZorroTemptationAutoGeneratedPropertiesEquals(AlZorroTemptation expected, AlZorroTemptation actual) {
        assertThat(expected)
            .as("Verify AlZorroTemptation auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlZorroTemptationUpdatableFieldsEquals(AlZorroTemptation expected, AlZorroTemptation actual) {
        assertThat(expected)
            .as("Verify AlZorroTemptation relevant properties")
            .satisfies(e -> assertThat(e.getZipAction()).as("check zipAction").isEqualTo(actual.getZipAction()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getTemplateId()).as("check templateId").isEqualTo(actual.getTemplateId()))
            .satisfies(e ->
                assertThat(e.getDataSourceMappingType()).as("check dataSourceMappingType").isEqualTo(actual.getDataSourceMappingType())
            )
            .satisfies(e ->
                assertThat(e.getTemplateDataMapping()).as("check templateDataMapping").isEqualTo(actual.getTemplateDataMapping())
            )
            .satisfies(e -> assertThat(e.getTargetUrls()).as("check targetUrls").isEqualTo(actual.getTargetUrls()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlZorroTemptationUpdatableRelationshipsEquals(AlZorroTemptation expected, AlZorroTemptation actual) {
        assertThat(expected)
            .as("Verify AlZorroTemptation relationships")
            .satisfies(e -> assertThat(e.getThumbnail()).as("check thumbnail").isEqualTo(actual.getThumbnail()))
            .satisfies(e -> assertThat(e.getApplication()).as("check application").isEqualTo(actual.getApplication()));
    }
}
