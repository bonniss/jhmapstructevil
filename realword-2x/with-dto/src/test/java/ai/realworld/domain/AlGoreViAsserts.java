package ai.realworld.domain;

import static ai.realworld.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AlGoreViAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlGoreViAllPropertiesEquals(AlGoreVi expected, AlGoreVi actual) {
        assertAlGoreViAutoGeneratedPropertiesEquals(expected, actual);
        assertAlGoreViAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlGoreViAllUpdatablePropertiesEquals(AlGoreVi expected, AlGoreVi actual) {
        assertAlGoreViUpdatableFieldsEquals(expected, actual);
        assertAlGoreViUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlGoreViAutoGeneratedPropertiesEquals(AlGoreVi expected, AlGoreVi actual) {
        assertThat(expected)
            .as("Verify AlGoreVi auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlGoreViUpdatableFieldsEquals(AlGoreVi expected, AlGoreVi actual) {
        assertThat(expected)
            .as("Verify AlGoreVi relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDiscountType()).as("check discountType").isEqualTo(actual.getDiscountType()))
            .satisfies(e ->
                assertThat(e.getDiscountRate())
                    .as("check discountRate")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getDiscountRate())
            )
            .satisfies(e -> assertThat(e.getScope()).as("check scope").isEqualTo(actual.getScope()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlGoreViUpdatableRelationshipsEquals(AlGoreVi expected, AlGoreVi actual) {
        // empty method
    }
}
