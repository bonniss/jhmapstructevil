package ai.realworld.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AlProProViAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlProProViAllPropertiesEquals(AlProProVi expected, AlProProVi actual) {
        assertAlProProViAutoGeneratedPropertiesEquals(expected, actual);
        assertAlProProViAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlProProViAllUpdatablePropertiesEquals(AlProProVi expected, AlProProVi actual) {
        assertAlProProViUpdatableFieldsEquals(expected, actual);
        assertAlProProViUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlProProViAutoGeneratedPropertiesEquals(AlProProVi expected, AlProProVi actual) {
        assertThat(expected)
            .as("Verify AlProProVi auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlProProViUpdatableFieldsEquals(AlProProVi expected, AlProProVi actual) {
        assertThat(expected)
            .as("Verify AlProProVi relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescriptionHeitiga()).as("check descriptionHeitiga").isEqualTo(actual.getDescriptionHeitiga()))
            .satisfies(e -> assertThat(e.getPropertyType()).as("check propertyType").isEqualTo(actual.getPropertyType()))
            .satisfies(e -> assertThat(e.getAreaInSquareMeter()).as("check areaInSquareMeter").isEqualTo(actual.getAreaInSquareMeter()))
            .satisfies(e -> assertThat(e.getNumberOfAdults()).as("check numberOfAdults").isEqualTo(actual.getNumberOfAdults()))
            .satisfies(e ->
                assertThat(e.getNumberOfPreschoolers()).as("check numberOfPreschoolers").isEqualTo(actual.getNumberOfPreschoolers())
            )
            .satisfies(e -> assertThat(e.getNumberOfChildren()).as("check numberOfChildren").isEqualTo(actual.getNumberOfChildren()))
            .satisfies(e -> assertThat(e.getNumberOfRooms()).as("check numberOfRooms").isEqualTo(actual.getNumberOfRooms()))
            .satisfies(e -> assertThat(e.getNumberOfFloors()).as("check numberOfFloors").isEqualTo(actual.getNumberOfFloors()))
            .satisfies(e -> assertThat(e.getBedSize()).as("check bedSize").isEqualTo(actual.getBedSize()))
            .satisfies(e -> assertThat(e.getIsEnabled()).as("check isEnabled").isEqualTo(actual.getIsEnabled()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlProProViUpdatableRelationshipsEquals(AlProProVi expected, AlProProVi actual) {
        assertThat(expected)
            .as("Verify AlProProVi relationships")
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()))
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getAvatar()).as("check avatar").isEqualTo(actual.getAvatar()))
            .satisfies(e -> assertThat(e.getApplication()).as("check application").isEqualTo(actual.getApplication()))
            .satisfies(e -> assertThat(e.getAmenities()).as("check amenities").isEqualTo(actual.getAmenities()))
            .satisfies(e -> assertThat(e.getImages()).as("check images").isEqualTo(actual.getImages()));
    }
}
