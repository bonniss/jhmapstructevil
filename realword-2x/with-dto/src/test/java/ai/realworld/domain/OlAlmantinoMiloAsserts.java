package ai.realworld.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OlAlmantinoMiloAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOlAlmantinoMiloAllPropertiesEquals(OlAlmantinoMilo expected, OlAlmantinoMilo actual) {
        assertOlAlmantinoMiloAutoGeneratedPropertiesEquals(expected, actual);
        assertOlAlmantinoMiloAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOlAlmantinoMiloAllUpdatablePropertiesEquals(OlAlmantinoMilo expected, OlAlmantinoMilo actual) {
        assertOlAlmantinoMiloUpdatableFieldsEquals(expected, actual);
        assertOlAlmantinoMiloUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOlAlmantinoMiloAutoGeneratedPropertiesEquals(OlAlmantinoMilo expected, OlAlmantinoMilo actual) {
        assertThat(expected)
            .as("Verify OlAlmantinoMilo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOlAlmantinoMiloUpdatableFieldsEquals(OlAlmantinoMilo expected, OlAlmantinoMilo actual) {
        assertThat(expected)
            .as("Verify OlAlmantinoMilo relevant properties")
            .satisfies(e -> assertThat(e.getProvider()).as("check provider").isEqualTo(actual.getProvider()))
            .satisfies(e ->
                assertThat(e.getProviderAppManagerId()).as("check providerAppManagerId").isEqualTo(actual.getProviderAppManagerId())
            )
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getProviderSecretKey()).as("check providerSecretKey").isEqualTo(actual.getProviderSecretKey()))
            .satisfies(e -> assertThat(e.getProviderToken()).as("check providerToken").isEqualTo(actual.getProviderToken()))
            .satisfies(e ->
                assertThat(e.getProviderRefreshToken()).as("check providerRefreshToken").isEqualTo(actual.getProviderRefreshToken())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOlAlmantinoMiloUpdatableRelationshipsEquals(OlAlmantinoMilo expected, OlAlmantinoMilo actual) {
        assertThat(expected)
            .as("Verify OlAlmantinoMilo relationships")
            .satisfies(e -> assertThat(e.getOrganization()).as("check organization").isEqualTo(actual.getOrganization()));
    }
}
