package ai.realworld.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EdSheeranViAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEdSheeranViAllPropertiesEquals(EdSheeranVi expected, EdSheeranVi actual) {
        assertEdSheeranViAutoGeneratedPropertiesEquals(expected, actual);
        assertEdSheeranViAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEdSheeranViAllUpdatablePropertiesEquals(EdSheeranVi expected, EdSheeranVi actual) {
        assertEdSheeranViUpdatableFieldsEquals(expected, actual);
        assertEdSheeranViUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEdSheeranViAutoGeneratedPropertiesEquals(EdSheeranVi expected, EdSheeranVi actual) {
        assertThat(expected)
            .as("Verify EdSheeranVi auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEdSheeranViUpdatableFieldsEquals(EdSheeranVi expected, EdSheeranVi actual) {
        assertThat(expected)
            .as("Verify EdSheeranVi relevant properties")
            .satisfies(e -> assertThat(e.getFamilyName()).as("check familyName").isEqualTo(actual.getFamilyName()))
            .satisfies(e -> assertThat(e.getGivenName()).as("check givenName").isEqualTo(actual.getGivenName()))
            .satisfies(e -> assertThat(e.getDisplay()).as("check display").isEqualTo(actual.getDisplay()))
            .satisfies(e -> assertThat(e.getDob()).as("check dob").isEqualTo(actual.getDob()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getContactsJason()).as("check contactsJason").isEqualTo(actual.getContactsJason()))
            .satisfies(e -> assertThat(e.getIsEnabled()).as("check isEnabled").isEqualTo(actual.getIsEnabled()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEdSheeranViUpdatableRelationshipsEquals(EdSheeranVi expected, EdSheeranVi actual) {
        assertThat(expected)
            .as("Verify EdSheeranVi relationships")
            .satisfies(e -> assertThat(e.getAgency()).as("check agency").isEqualTo(actual.getAgency()))
            .satisfies(e -> assertThat(e.getAvatar()).as("check avatar").isEqualTo(actual.getAvatar()))
            .satisfies(e -> assertThat(e.getAppUser()).as("check appUser").isEqualTo(actual.getAppUser()))
            .satisfies(e -> assertThat(e.getApplication()).as("check application").isEqualTo(actual.getApplication()));
    }
}
