package ai.realworld.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AntonioBanderasViAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAntonioBanderasViAllPropertiesEquals(AntonioBanderasVi expected, AntonioBanderasVi actual) {
        assertAntonioBanderasViAutoGeneratedPropertiesEquals(expected, actual);
        assertAntonioBanderasViAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAntonioBanderasViAllUpdatablePropertiesEquals(AntonioBanderasVi expected, AntonioBanderasVi actual) {
        assertAntonioBanderasViUpdatableFieldsEquals(expected, actual);
        assertAntonioBanderasViUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAntonioBanderasViAutoGeneratedPropertiesEquals(AntonioBanderasVi expected, AntonioBanderasVi actual) {
        assertThat(expected)
            .as("Verify AntonioBanderasVi auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAntonioBanderasViUpdatableFieldsEquals(AntonioBanderasVi expected, AntonioBanderasVi actual) {
        assertThat(expected)
            .as("Verify AntonioBanderasVi relevant properties")
            .satisfies(e -> assertThat(e.getLevel()).as("check level").isEqualTo(actual.getLevel()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getFullName()).as("check fullName").isEqualTo(actual.getFullName()))
            .satisfies(e -> assertThat(e.getNativeName()).as("check nativeName").isEqualTo(actual.getNativeName()))
            .satisfies(e -> assertThat(e.getOfficialCode()).as("check officialCode").isEqualTo(actual.getOfficialCode()))
            .satisfies(e -> assertThat(e.getDivisionTerm()).as("check divisionTerm").isEqualTo(actual.getDivisionTerm()))
            .satisfies(e -> assertThat(e.getIsDeleted()).as("check isDeleted").isEqualTo(actual.getIsDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAntonioBanderasViUpdatableRelationshipsEquals(AntonioBanderasVi expected, AntonioBanderasVi actual) {
        assertThat(expected)
            .as("Verify AntonioBanderasVi relationships")
            .satisfies(e -> assertThat(e.getCurrent()).as("check current").isEqualTo(actual.getCurrent()))
            .satisfies(e -> assertThat(e.getParent()).as("check parent").isEqualTo(actual.getParent()));
    }
}
