package ai.realworld.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AlSherMaleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlSherMaleAllPropertiesEquals(AlSherMale expected, AlSherMale actual) {
        assertAlSherMaleAutoGeneratedPropertiesEquals(expected, actual);
        assertAlSherMaleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlSherMaleAllUpdatablePropertiesEquals(AlSherMale expected, AlSherMale actual) {
        assertAlSherMaleUpdatableFieldsEquals(expected, actual);
        assertAlSherMaleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlSherMaleAutoGeneratedPropertiesEquals(AlSherMale expected, AlSherMale actual) {
        assertThat(expected)
            .as("Verify AlSherMale auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlSherMaleUpdatableFieldsEquals(AlSherMale expected, AlSherMale actual) {
        assertThat(expected)
            .as("Verify AlSherMale relevant properties")
            .satisfies(e ->
                assertThat(e.getDataSourceMappingType()).as("check dataSourceMappingType").isEqualTo(actual.getDataSourceMappingType())
            )
            .satisfies(e -> assertThat(e.getKeyword()).as("check keyword").isEqualTo(actual.getKeyword()))
            .satisfies(e -> assertThat(e.getProperty()).as("check property").isEqualTo(actual.getProperty()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlSherMaleUpdatableRelationshipsEquals(AlSherMale expected, AlSherMale actual) {
        assertThat(expected)
            .as("Verify AlSherMale relationships")
            .satisfies(e -> assertThat(e.getApplication()).as("check application").isEqualTo(actual.getApplication()));
    }
}
